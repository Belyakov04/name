import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from game import NumberGame
from database import init_db, add_user
from telegram.error import TelegramError
from config import ADMIN_IDS


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT score FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        score = result[0]
        await update.message.reply_text(f"Твой счёт: {score} очков.")
    else:
        add_user(user_id, username)
        await update.message.reply_text("Ты новый игрок! Начни игру: /game")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Ошибка: {context.error}")
    if update.effective_message:
        await update.effective_message.reply_text("Произошла ошибка. Попробуй ещё раз.")


logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Привет! Я простой бот. Напиши /help, чтобы узнать мои команды.")

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    Доступные команды:
    /start - Начать работу с ботом
    /help - Показать это сообщение
    /game - Играть в игру 'Угадай число'
    """
    await update.message.reply_text(help_text)

def main():
    application = Application.builder().token("YOUR_TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("game", game))
    application.add_handler(CommandHandler("guess", guess))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("admin", admin_stats))
    application.add_error_handler(error_handler)
    init_db()

    application.run_polling()

if name == "__main__":
    main()

user_games = {}


async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_games[user_id] = NumberGame()
    await update.message.reply_text("Я загадал число от 1 до 100. Попробуй угадать!")


async def guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_games:
        await update.message.reply_text("Сначала начни игру: /game")
        return

    try:
        guess_num = int(context.args[0])
        result = user_games[user_id].check_guess(guess_num)
        await update.message.reply_text(result)
    except (IndexError, ValueError):
        await update.message.reply_text("Введи число после команды, например: /guess 50")



async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("У тебя нет прав!")
        return

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await update.message.reply_text(f"Всего пользователей: {count}")


