import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
from config import BOT_TOKEN, ADMIN_IDS
from database import init_db, add_user, add_referral, get_user_level, update_score
from game import NumberGame
from utils import log_command
from achievements import check_achievements
from daily_rewards import init_rewards_db, get_reward
from quests import check_quests


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_games = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data='game')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üì¢ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data='refer')]
    ]
    return InlineKeyboardMarkup(keyboard)


# ---- –ö–æ–º–∞–Ω–¥—ã ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    args = context.args

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if args and args[0].startswith('ref_'):
        referrer_id = int(args[0][4:])
        add_referral(referrer_id, user_id)
        await update.message.reply_text("üéâ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")

    add_user(user_id, username)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    log_command("start", user_id, username)


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
    /help - –ü–æ–º–æ—â—å
    /game - –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É
    /stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    /refer - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    /profile - –ú–æ–π —É—Ä–æ–≤–µ–Ω—å
    """
    await update.message.reply_text(help_text)
    log_command("help", update.effective_user.id, update.effective_user.username)


# ---- –ò–≥—Ä–∞ ----
async def game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_games[user_id] = NumberGame()
    await update.callback_query.message.reply_text("üî¢ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£–≥–∞–¥—ã–≤–∞–π!")


async def guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_games:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /game")
        return

    try:
        guess_num = int(context.args[0])
        game = user_games[user_id]
        result = game.check_guess(guess_num)

        if "—É–≥–∞–¥–∞–ª" in result:
            update_score(user_id, 10)
            del user_games[user_id]  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É

        await update.message.reply_text(result)
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /guess <—á–∏—Å–ª–æ>")


async def achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    achievements_list = check_achievements(user_id)
    if achievements_list:
        text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n‚Ä¢ " + "\n‚Ä¢ ".join(achievements_list)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!"
    await update.message.reply_text(text)


async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    reward = get_reward(user_id)
    if reward > 0:
        update_score(user_id, reward)
        await update.message.reply_text(
            f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –æ—á–∫–æ–≤ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!\n"
            f"–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –±–æ–ª—å—à–µ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
        )
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è")


async def quests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_stats = {
        'games_played': 5,  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        'total_score': get_user_score(user_id)
    }
    completed = check_quests(user_stats)
    if completed:
        text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n"
        for title, reward in completed:
            text += f"‚Ä¢ {title} (+{reward} –æ—á–∫–æ–≤)\n"
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"
    await update.message.reply_text(text)


# ---- –ü—Ä–æ—Ñ–∏–ª—å ----
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT score FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        await update.message.reply_text(f"üèÜ –¢–≤–æ–π —Å—á–µ—Ç: {result[0]} –æ—á–∫–æ–≤")
    else:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª!")


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    level = get_user_level(user_id)
    await update.message.reply_text(f"‚ú® –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}\n–ö–∞–∂–¥—ã–µ 100 –æ—á–∫–æ–≤ = 1 —É—Ä–æ–≤–µ–Ω—å")


# ---- –†–µ—Ñ–µ—Ä–∞–ª—ã ----
async def refer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot_username = (await context.bot.get_me()).username
    await update.message.reply_text(


    f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n"
    f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/{bot_username}?start=ref_{user_id}"
    )

    # ---- –ß–∞—Ç ----
    async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
        responses = {
            "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! üòä",
            "–∫–∞–∫ –¥–µ–ª–∞": "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Å–∞–º?",
            "–ø–æ–∫–∞": "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üëã"
        }
        user_text = update.message.text.lower()
        reply = responses.get(user_text, "–Ø –Ω–µ –ø–æ–Ω—è–ª... –ù–∞–ø–∏—à–∏ /help")
        await update.message.reply_text(reply)

    # ---- –ê–¥–º–∏–Ω–∫–∞ ----
    async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return

        conn = sqlite3.connect("bot.db")
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        conn.close()
        await update.message.reply_text(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

    # ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----
    async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == 'game':
            await game_callback(update, context)
        elif query.data == 'stats':
            await stats(update, context)
        elif query.data == 'refer':
            await refer(update, context)

    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update.effective_message:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    # ---- –ó–∞–ø—É—Å–∫ ----
    def main():
        init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_rewards_db()
        application.add_handler(CommandHandler("daily", daily))
        app = Application.builder().token(BOT_TOKEN).build()


        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help))
        app.add_handler(CommandHandler("game", game_callback))
        app.add_handler(CommandHandler("guess", guess))
        app.add_handler(CommandHandler("stats", stats))
        app.add_handler(CommandHandler("profile", profile))
        app.add_handler(CommandHandler("refer", refer))
        app.add_handler(CommandHandler("admin", admin_stats))



        # –ö–Ω–æ–ø–∫–∏
        app.add_handler(CallbackQueryHandler(button_click))

        application.add_handler(CommandHandler("quests", quests))

        application.add_handler(CommandHandler("achievements", achievements))

        # –ß–∞—Ç
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))


        # –û—à–∏–±–∫–∏
        app.add_error_handler(error_handler)

        app.run_polling()

    if name == "__main__":
        main()
